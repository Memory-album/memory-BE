spring:
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 10MB
      resolve-lazily: true
      file-size-threshold: 0

  config:
    import:
      - classpath:application-db.yml
      - classpath:application-key.yml

  jpa:
    defer-datasource-initialization: true
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        default_batch_fetch_size: 100
        format_sql: true
    open-in-view: false

  security:
    user:
      name: admin
      password: adminpassword

  mail:
    host: smtp.gmail.com
    port: 465
    username: ${GMAIL_MAIL_USERNAME}
    password: ${GMAIL_MAIL_PASSWORD}
    protocol: smtp
    properties:
      mail.smtp.auth: true
      mail.smtp.ssl.enable: true

logging:
  level:
    org.hibernate.SQL: debug
    org.hibernate.type: trace
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG
    org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: TRACE
    com.min.i.memory_BE: DEBUG
    com.min.i.memory_BE.global.service.S3Service: DEBUG
    com.min.i.memory_BE.domain.user.service.UserService: DEBUG
    com.amazonaws: DEBUG

springdoc:
  swagger-ui:
    path: /swagger-ui.html
    groups-order: DESC
    operationsSorter: method
    disable-swagger-default-url: true
  api-docs:
    path: /v3/api-docs
  show-actuator: true

jwt:
  secret: ${JWT_SECRET_KEY}

naver:
  oauth:
    client-id: ${NAVER_CLIENT_ID}
    client-secret: ${NAVER_CLIENT_SECRET}
    redirect-uri: http://localhost:8080/oauth/callback?provider=naver
    token-url: https://nid.naver.com/oauth2.0/token
    auth-url: https://nid.naver.com/oauth2.0/authorize

kakao:
  oauth:
    client-id: ${KAKAO_CLIENT_ID}
    client-secret: ${KAKAO_CLIENT_SECRET}
    token-url: https://kauth.kakao.com/oauth/token
    auth-url: https://kauth.kakao.com/oauth/authorize
    redirect-uri: http://localhost:8080/oauth/callback?provider=kakao

google:
  oauth:
    client-id: ${GOOGLE_CLIENT_ID}
    client-secret: ${GOOGLE_CLIENT_SECRET}
    auth-url: https://accounts.google.com/o/oauth2/v2/auth
    token-url: https://oauth2.googleapis.com/token
    redirect-uri: http://localhost:8080/oauth/callback?provider=google

# FastAPI 서버 설정
fastapi:
  server:
    url: http://localhost:8000  # FastAPI 서버 주소
  connection:
    timeout: 5000  # 연결 타임아웃 (ms)
  read:
    timeout: 30000  # 읽기 타임아웃 (ms)

---
spring.config.activate.on-profile: local
spring:
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:file:./data/memorydb;MODE=MySQL;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password:
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    defer-datasource-initialization: true
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: false
  sql:
    init:
      mode: always
      platform: h2

---
spring.config.activate.on-profile: dev
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${database.dev.ip}/${database.dev.name}?characterEncoding=UTF-8&serverTimezone=Asia/Seoul
    username: ${database.dev.username}
    password: ${database.dev.password}
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 5000
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
    show-sql: true

    logging:
  level:
  discord:
    webhook-url: https://discord.com/api/webhooks/1370075555529232404/mUOfVFtleD_b3vVm7Smuk5MXAYACZvq9PAXZjkHBUI2w5vv1aStt59DZ6aZcZ6-LqfmE
  config: classpath:logback-spring.xml

# Google Cloud Speech 설정
google:
  speech:
    language: ko-KR
    credentials-file: classpath:keys/google-credentials.json